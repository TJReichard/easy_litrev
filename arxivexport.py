import arxiv
import csv

# Construct the default API client.
client = arxiv.Client()

search = arxiv.Search(
# query hits are not reproducible between the websites advanced search feature and the classic export api. Workaround: Crawl advanced search using selenium for arxiv ids and use id_list lookup for exact matches
    id_list=['2403.04758', '2403.03550', '2403.03544', '2403.03028', '2403.02781', '2403.02756', '2403.02738', '2403.02691', '2403.02472', '2403.01849', '2403.01481', '2403.00994', '2403.00219', '2402.19371', '2402.19200', '2402.18700', '2402.18458', '2402.18397', '2402.18252', '2402.17564', '2402.17230', '2402.16929', '2402.16132', '2402.16050', '2402.15930', '2402.15833', '2402.15764', '2402.14854', '2402.14837', '2402.14808', '2402.14522', '2402.14195', '2402.13415', '2402.12959', '2402.12842', '2402.12801', '2402.12150', '2402.11907', '2402.11889', '2402.11863', '2402.11755', '2402.11347', '2402.10353', '2402.07927', '2402.07909', '2402.07408', '2402.07386', '2402.07179', '2402.05868', '2402.04075', '2402.03223', '2402.02651', '2402.02408', '2402.02101', '2402.01867', '2402.01713', '2402.00898', '2402.00414', '2402.00284', '2402.00282', '2401.18018', '2401.17263', '2401.15798', '2401.15585', '2401.14447', '2401.14166', '2401.14043', '2401.12988', '2401.12954', '2401.12242', '2401.11337', '2401.10759', '2401.09862', '2401.08429', '2401.07702', '2401.07457', '2401.07314', '2401.07098', '2401.06799', '2401.05707', '2401.04997', '2401.04858', '2401.04515', '2401.03729', '2401.02909', '2401.02418', '2401.00991', '2401.00284', '2312.17485', '2312.15821', '2312.14197', '2312.11570', '2312.11171', '2312.10813', '2312.10692', '2312.10463', '2312.09693', '2312.08726', '2312.08477', '2312.08367', '2312.08027', '2312.07910', '2312.07399', '2312.06323', '2312.06093', '2312.05276', '2312.04076', '2312.03740', '2312.03724', '2312.01837', '2312.01629', '2312.01564', '2312.01032', '2312.00471', '2312.00249', '2311.18231', '2311.17812', '2311.17330', '2311.16494', '2311.16492', '2311.16445', '2311.13628', '2311.13538', '2311.12785', '2311.11598', '2311.11552', '2311.11261', '2311.11178', '2311.10054', '2311.09868', '2311.09732', '2311.09050', '2311.08268', '2311.07076', '2311.06555', '2311.06427', '2311.06062', '2311.05608', '2311.05373', '2311.05169', '2311.04954', '2311.04155', '2311.01981', '2311.01967', '2311.01490', '2311.01260', '2311.00287', '2311.00172', '2310.20159', '2310.19792', '2310.18778', '2310.18358', '2310.18333', '2310.18331', '2310.18127', '2310.17419', '2310.16535', '2310.16436', '2310.16427', '2310.16069', '2310.15829', '2310.15080', '2310.14799', '2310.14735', '2310.14623', '2310.14192', '2310.13552', '2310.13226', '2310.13024', '2310.12505', '2310.12490', '2310.12439', '2310.12049', '2310.11324', '2310.11252', '2310.10508', '2310.09235', '2310.09234', '2310.08395', '2310.08123', '2310.07653', '2310.07170', '2310.07146', '2310.06983', '2310.06692', '2310.06239', '2310.06123', '2310.05824', '2310.05736', '2310.05015', '2310.04743', '2310.04451', '2310.04438', '2310.01854', '2310.01691', '2310.01467', '2310.01441', '2310.00272', '2309.16621', '2309.15649', '2309.15427', '2309.14779', '2309.13734', '2309.13633', '2309.13078', '2309.12940', '2309.12276', '2309.12244', '2309.11977', '2309.11439', '2309.10253', '2309.09969', '2309.09443', '2309.09262', '2309.08532', '2309.08357', '2309.08303', '2309.08140', '2309.08008', '2309.07866', '2309.07760', '2309.07727', '2309.06759', '2309.05227', '2309.04725', '2309.04379', '2309.04158', '2309.03661', '2309.03406', '2309.01715', '2309.01155', '2309.00751', '2308.15851', '2308.15827', '2308.15324', '2308.14960', '2308.13479', '2308.13382', '2308.12890', '2308.12261', '2308.11601', '2308.11236', '2308.11186', '2308.10819', '2308.10173', '2308.10088', '2308.10061', '2308.09729', '2308.09012', '2308.07645', '2308.07610', '2308.07411', '2308.06834', '2308.05596', '2308.05342', '2308.04138', '2308.04029', '2308.03921', '2308.03825', '2308.03558', '2308.00304', '2307.16888', '2307.16338', '2307.15780', '2307.15331', '2307.14349', '2307.13339', '2307.12980', '2307.11978', '2307.11934', '2307.11795', '2307.11227', '2307.10573', '2307.10472', '2307.08321', '2307.08303', '2307.07880', '2307.07341', '2307.06865', '2307.01446', '2307.01142', '2307.00910', '2306.17563', '2306.16007', '2306.15706', '2306.11648', '2306.11400', '2306.11372', '2306.11066', '2306.09327', '2306.09244', '2306.06815', '2306.06427', '2306.06058', '2306.05659', '2306.04933', '2306.04735', '2306.04556', '2306.04528', '2306.04136', '2306.04009', '2306.03799', '2306.03423', '2306.03422', '2306.03313', '2306.02569', '2306.02207', '2306.01987', '2306.01475', '2306.01195', '2306.00409', '2305.19821', '2305.19522', '2305.19500', '2305.19234', '2305.18507', '2305.18189', '2305.17891', '2305.15594', '2305.14791', '2305.14766', '2305.14564', '2305.14428', '2305.14310', '2305.14257', '2305.13954', '2305.13733', '2305.13655', '2305.13626', '2305.13264', '2305.13252', '2305.13235', '2305.13085', '2305.12761', '2305.12757', '2305.12726', '2305.12586', '2305.12001', '2305.11759', '2305.11366', '2305.09656', '2305.08714', '2305.07912', '2305.07019', '2305.07004', '2305.06575', '2305.06212', '2305.04388', '2305.04091', '2305.03653', '2305.03380', '2305.01219', '2304.14856', '2304.11657', '2304.11490', '2304.09797', '2304.09337', '2304.08479', '2304.07919', '2304.06815', '2304.05970', '2304.05051', '2304.03472', '2304.01964', '2303.16416', '2303.15234', '2303.13809', '2303.13592', '2303.13283', '2303.13233', '2303.13217', '2303.13035', '2303.11315', '2303.11313', '2303.09384', '2303.09100', '2303.09038', '2303.08769', '2303.07142', '2303.06573', '2303.06571', '2303.05352', '2303.03199', '2303.01903', '2302.12246', '2302.12170', '2302.11520', '2302.09865', '2302.09236', '2302.09185', '2302.08958', '2302.07856', '2302.03735', '2302.03269', '2302.03154', '2302.00618', '2302.00070', '2301.13662', '2301.12868', '2301.12429', '2301.12314', '2301.08721', '2301.07085', '2301.07069', '2301.05226', '2301.03987', '2212.10846', '2212.09737', '2212.09651', '2212.09597', '2212.09535', '2212.08635', '2212.06369', '2212.06094', '2212.04196', '2212.04037', '2212.01326', '2212.00616', '2211.11720', '2211.10265', '2211.09527', '2211.07830', '2211.05077', '2211.03267', '2211.02219', '2211.01910', '2211.01562', '2210.16637', '2210.16539', '2210.15461', '2210.15157', '2210.14803', '2210.12763', '2210.12360', '2210.10841', '2210.10362', '2210.08536', '2210.07225', '2210.07179', '2210.06229', '2210.04726', '2210.04186', '2210.03493', '2210.03337', '2210.03162', '2210.02441', '2210.02390', '2210.01253', '2210.01115', '2209.12711', '2209.08141', '2209.07636', '2209.07511', '2209.06995', '2209.06701', '2209.04889', '2209.01882', '2208.13474', '2208.12539', '2208.11057', '2208.08340', '2208.07852', '2208.05361', '2208.01312', '2207.08184', '2206.12839', '2206.11752', '2206.02338', '2206.01958', '2205.15509', '2205.12650', '2205.12600', '2205.11503', '2205.11169', '2205.11166', '2205.11100', '2205.11024', '2205.10625', '2205.10593', '2205.05535', '2205.02318', '2205.01308', '2204.07289', '2204.03649', '2204.01172', '2204.00166', '2203.16773', '2203.14940', '2203.13366', '2203.13224', '2203.12258', '2203.11933', '2203.08383', '2203.07281', '2203.06566', '2203.05557', '2203.05115', '2203.04006', '2203.00902', '2202.11822', '2202.01279', '2202.00828', '2201.11903', '2201.08670', '2201.08531', '2201.07126', '2201.05411', '2112.09583', '2112.08718', '2112.07868', '2112.05587', '2112.04478', '2112.01518', '2111.08284', '2111.06719', '2110.08484', '2110.07298', '2110.07280', '2110.06609', '2110.01691', '2109.11797', '2109.07848', '2109.07830', '2109.07506', '2109.03685', '2109.01134', '2108.13161', '2108.04106', '2107.13586', '2107.06955', '2106.13353', '2106.09226', '2104.04670', '2103.10685', '2102.07350', '2010.15980']
)


results = client.results(search)

# Write to CSV

fieldnames = ['ShortList', 'Title', 'Abstract', 'Authors', 'Journal', 'Publication Date',  'Volume', 'Issue', 'Pages', 'URL', 'Document Type']
with open(r'D:\Uni\MA\LitRev\arxivexp.csv', 'w', newline='', encoding='utf-8') as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    for entry in results:
        entry = vars(entry)
        author_names = [author.name for author in entry['authors']]

    # Extract author names if 'authors' key exists and is not empty
        if 'authors' in entry and entry['authors']:
            author_names = [author.name for author in entry['authors']]
        else:
            author_names = []
        entry['Authors'] = '; '.join(author_names)
        writer.writerow({
            'ShortList': '',
            'Title': entry.get('title', ''),
            'Abstract': entry.get('summary', ''),
            'Authors': entry.get('Authors', ''),
            'Journal': entry.get('journal_ref', ''),
            'Document Type': entry.get('primary_category', ''),
            'Publication Date': entry.get('published', ''),
            'Volume': entry.get('comment', ''),
            'Issue': entry.get('N', ''),
            'Pages': entry.get('P', ''),
            'URL': entry.get('entry_id', '')
            })
